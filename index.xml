<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>あんぜんぴんの落書き帳</title>
    <link>https://annpin.github.io/</link>
    <description>Recent content on あんぜんぴんの落書き帳</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>© 2018. All rights reserved.</copyright>
    <lastBuildDate>Tue, 17 Jul 2018 19:12:33 +0900</lastBuildDate>
    
	<atom:link href="https://annpin.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Linux カーネル v2.6.39 と v4.18-rc5 のコードをチョット比べてみる</title>
      <link>https://annpin.github.io/posts/18/07/17/linux-kernel-code-reading/</link>
      <pubDate>Tue, 17 Jul 2018 19:12:33 +0900</pubDate>
      
      <guid>https://annpin.github.io/posts/18/07/17/linux-kernel-code-reading/</guid>
      <description>2.6 系の Linux カーネルのコードを解説してくれている本を読んでみたら、 最新の Linux カーネルの実装がどの程度変化しているのかちょっと調べてみたくなってしまった.
なので今回は int $0x80 や sysenter が呼ばれた際のシステムコールハンドラの動きをちょっとだけ比べてみた.
ちょっと見比べてみたときのメモの単なる垂れ流し. オチなし.
x86/x64 でのシステムコール呼び出し - int $0x80 と sysenter って何が違うのよ x86 の Linux では古くは int $0x80 / iret によるソフトウェア割り込みでシステムコール呼び出しを行っていたらしいが、呼び出しのオーバーヘッドが大きいことから近年の実装では x86 では sysenter/sysexit、x64 では syscall/sysret が使われているらしい.
sysenter や syscall は近年の x86 や x64 CPU で追加された命令らしい. こっちのほうが int $0x80 よりも高速に動くから、こっちを使うことにしましたって感じですかね.
v2.6.39 Linux カーネル 2.6.39 では arch/x86/kernel/entry_32.S#498 および arch/x86/kernel/entry_64.S#455 にて ENTRY(system_call) によって system_call というラベルが定義されている.
 arch/x86/kernel/entry_32.S#498 arch/x86/kernel/entry_64.S#455  加えて、arch/x86/kernel/traps.c#871 には system_call ラベルを割り込みハンドラに登録しているようなので、system_call ラベルがシステムコール実行の窓口になっている模様.</description>
    </item>
    
    <item>
      <title>バイナリ解析についてのメモ</title>
      <link>https://annpin.github.io/posts/18/07/16/binary-analysis-memo/</link>
      <pubDate>Mon, 16 Jul 2018 12:30:10 +0900</pubDate>
      
      <guid>https://annpin.github.io/posts/18/07/16/binary-analysis-memo/</guid>
      <description>バイナリ解析ツールの使い方とか雑多なことについての個人的なメモ.
不定期更新.
ツールについて objdump 実行ファイルの逆アセンブルができる. コンパイル後に各関数がどんな機械語に落ちているのかを調べるのに便利.
# アセンブリのみの出力を得る. $ objdump -d binary_file # 元の C 言語ソース付きの出力を得る. $ objdump -S binary_file # デフォルトの AT&amp;amp;T シンタックスではなく、(nasm などの) Intel シンタックスを使用して表示する. $ objdump -d -M intel binary_file # 大体出力結果が多すぎるので、head で先頭だけ取り出したりする. $ objdump -d binary_file | head # でも出力結果を細かく調べたいときには vim が便利. $ objdump -d binary_file | vim -  なお、バイナリファイルのフォーマットを objdump が自動判定できない場合には --target オプションを与えることでファイルの読み込みフォーマットを手動で設定することができる. (--target=coff-i386 など.)
readelf readelf コマンドは ELF 形式の実行ファイルの解析ができる. 関数のシンボルテーブル情報が含まれているため、各関数がどのアドレスに割り当てられているのか確認できる. 複数の関数が同じアドレスに割り当てられているかを調べることで関数同士が互いにエイリアスになっているかを調べられる.
$ readelf -a binary_file  strace 特定の実行ファイルが呼び出しているシステムコールの一覧を調べられる.</description>
    </item>
    
    <item>
      <title>gdb のコマンドメモ</title>
      <link>https://annpin.github.io/posts/18/07/16/gdb-commands/</link>
      <pubDate>Mon, 16 Jul 2018 07:47:21 +0900</pubDate>
      
      <guid>https://annpin.github.io/posts/18/07/16/gdb-commands/</guid>
      <description>gdb (GNU Debugger) のコマンド、わりと毎回調べ直してる気がするのでとりあえずまとめとく. シェル内での操作は先頭に $、gdb 内での操作は先頭に (gdb) と付けているが、これらは実際に入力する必要はないので注意.
準備 C プログラムを gdb でデバッグしたい場合、gcc などのコンパイラにデバッグフラグを渡してからそのファイルをコンパイルする. hello.c を gcc でコンパイルするなら、以下のようにして -g フラグを渡してコンパイルする.
$ gcc -o hello hello.c -g -Wall  -Wall フラグは警告を可能な限り多く表示するフラグ. とりあえず有効にしておいたほうが無難らしい.
起動と終了 起動は単に gdb コマンドの後ろにデバッグしたい実行ファイル名を続ければ OK. -q フラグを与えると、起動時のライセンスに関するメッセージが表示されずに起動する. (quiet の q かな)
$ gdb hello  $ gdb -q hello  終了は quit. exit ではダメっぽいね.
(gdb) quit  実は q だけでも OK. gdb のコマンドははじめの 1 文字だけでも認識される. (すべてのコマンドがそうなのかは知らないけど&amp;hellip;)
(gdb) q  実行 実行は run あるいは r.</description>
    </item>
    
    <item>
      <title>C/C&#43;&#43; の const 修飾子の位置で混乱しないために</title>
      <link>https://annpin.github.io/posts/18/03/27/c-cpp-const/</link>
      <pubDate>Tue, 27 Mar 2018 18:16:17 +0900</pubDate>
      
      <guid>https://annpin.github.io/posts/18/03/27/c-cpp-const/</guid>
      <description>C や C++ の const 修飾子は変数や引数に指定することで &amp;ldquo;値が不変である&amp;rdquo; ということを示す. 極めて単純である.
これは書き方にいくつかのバリエーションが存在するが、ポインタ変数に対して指定する場合には初見だと非常に混乱する記述となる. この記事ではこの const 修飾子を混乱せずに使うための考え方についてまとめる.
変数に対して const 指定する場合 int a = 10; のように宣言された変数を const 指定する場合には、以下のいずれかの書き方がある.
const int a = 10; // 変数 a の値は書き換えできなくなる. int const a = 10; // 同上  このいずれかの記述を行った場合、変数 a は値を書き換えることができなくなる. すなわち、a = 20; のような代入を行おうとするとコンパイルエラーが発生するようになる.
これらは 2 通りの書き方で同じ効果が得られるので &amp;ldquo;どちらの書き方でも良い&amp;rdquo; とよく説明される. つまり、const int と int const はどちらも &amp;ldquo;不変 (constant) な int 型&amp;rdquo; を表すのである.
よって const int a や int const a は &amp;ldquo;不変な int 型の変数 a&amp;ldquo; と読むわけである.</description>
    </item>
    
    <item>
      <title>macOS Sierra で非 LLVM な gcc をビルドし、他のプロセッサ向けのクロスコンパイラ gcc をビルドする</title>
      <link>https://annpin.github.io/posts/18/03/07/cross-compiler/</link>
      <pubDate>Wed, 07 Mar 2018 10:19:24 +0900</pubDate>
      
      <guid>https://annpin.github.io/posts/18/03/07/cross-compiler/</guid>
      <description>まぁタイトルの通りなのだけれども、macOS で LLVM じゃない普通の gcc をビルドした後で他のプロセッサ向けのクロスコンパイラ gcc をビルドする方法についてメモしておく. 今回は i386 の Linux 向けのクロスコンパイラをビルドすることにする.
まずは作業用のディレクトリを作成する. 今回はホームディレクトリ中に cross というディレクトリを作り、そこで作業することにした.
$ mkdir ~/cross $ cd ~/cross  さて、最初からいきなりクロスコンパイラをビルドできるわけではない. macOS 標準の gcc は実体は clang であるが、クロスコンパイラのビルドにはネイティブの gcc が必要となるためまずはホスト環境のためのネイティブ gcc を用意する必要がある.
今回は gcc 7.3.0 を使うことにするので、このネイティブ gcc は N-gcc-7.3.0 というディレクトリに配置することにする.
$ mkdir N-gcc-7.3.0 $ cd N-gcc-7.3.0  はじめに、GNU の公式 から必要となるソフトウェア郡を FTP 経由でダウンロードする必要がある. GNU の FTP は国ごとにたくさんのミラーが存在しているが、今回は JAIST の FTP ミラー を利用することにした. gcc のビルドには以下のソフトウェアのソースが必要である.
 GNU Compiler Collection (gcc): tar.</description>
    </item>
    
    <item>
      <title>macOS Sierra 環境で 自作エミュレータで学ぶ x86 アーキテクチャを読み進めるための環境構築をしたかった</title>
      <link>https://annpin.github.io/posts/18/03/07/x86-emulator-book-on-macos/</link>
      <pubDate>Wed, 07 Mar 2018 10:19:10 +0900</pubDate>
      
      <guid>https://annpin.github.io/posts/18/03/07/x86-emulator-book-on-macos/</guid>
      <description>ということで 前回の記事 で触れたように、macOS 上で 自作エミュレータで学ぶ x86 アーキテクチャ を読み進めていく際の開発環境を作ろうとした際の奮闘記を置いておく.
この本は x86 の CPU エミュレータを自作することで、普段使っている Intel CPU の基本的な振る舞いについてを学習できる本だ. とても面白い. しかし、この本は基本的に Windows 環境でサンプルを動作させることしか前提としておらず、macOS では動作が保証されていない. エミュレータ自体は C 言語で開発していくため、別に C 言語が使える環境ならばどの OS 上でも動作させることができるだろう. しかし、問題となるのは エミュレータに読み込ませるためのテストプログラムが Windows 以外の環境で用意できるか である. エミュレータを作る立場では、そもそもテストプログラムが意図した機械語列でなければ本に沿って作業を進めていくことができない. したがって、C 言語で書かれたテストプログラムを意図した通りの機械語列に変換させる必要がある. 通常、C 言語のプログラムがどのような機械語に変換されるかはコンパイラ任せであるため、意図したとおりの機械語列を得ようとするならば、全く同一の環境を用意して作業するのが当然望ましい だろう. (同じ OS、同じバージョンのコンパイラ)
はじめに弁明しておくと僕は前回の記事で述べた通り、結局 VM 上の Windows でテストプログラムをコンパイルし、生成されたバイナリを macOS 上に移動させることで本書を読み進めていった. したがって、以下の記事で説明している内容は たぶん参考にならない. というのも、やはり C コンパイラは macOS 環境下で意図した機械語列を吐いてくれなかったためである&amp;hellip;
この本では、例えば最初に以下のようなプログラムをテストプログラムとして使用する.
 casm-c-sample.c  void func(void) { int val = 0; val++; }  本文 p.</description>
    </item>
    
    <item>
      <title>低レイヤーのはじめの一歩</title>
      <link>https://annpin.github.io/posts/18/03/06/hello-low-layer-programming/</link>
      <pubDate>Tue, 06 Mar 2018 20:18:01 +0900</pubDate>
      
      <guid>https://annpin.github.io/posts/18/03/06/hello-low-layer-programming/</guid>
      <description>今年は年始辺りから低レイヤー周りの勉強を始めている.
はじめは Z80 アセンブリを macOS 上のエミュレータで動作させるところからスタートした. この動画 を参考に、z80pack に 付属している Z80 アセンブラ z80asm とエミュレータ z80sim を使って はじめて読むマシン語 の サンプルプログラムを自分で動かしてみたりしていた. ただ、DB 命令を使うサンプルでは z80asm が DB を疑似命令として認識しないようであったため、 一部 z80asm の代わりに zasm を使った.
z80asm と z80sim は組み合わせて使う分にはとても快適なのだが、生成/実行される機械語プログラムの先頭にどうも 0xFF 0xYY 0xXX というフォーマットの 3 バイトのヘッダを付与することを前提としているようだ. この 3 バイトのうち、0xYY と 0xXX はアセンブリコード中で ORG 0xXXYY と指定したエントリポイントのアドレスがそのまま挿入されるらしく、zasm で生成した機械語プログラムを z80sim で正しく読み込むためにはこの 3 バイトのヘッダ情報を自分で付与してやる必要があった.
いずれにしても、低レイヤー周りの知識を一切持たなかった身としては Z80 アセンブリはとても良い導入であったと思う. Zilog 社が開発した Z80 は非常に古い 8 ビット CPU ではあるが、Intel が発売した 8 ビット CPU である 8080 の完全な上位互換を持っている.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://annpin.github.io/about/</link>
      <pubDate>Tue, 06 Mar 2018 19:05:37 +0900</pubDate>
      
      <guid>https://annpin.github.io/about/</guid>
      <description> 自己紹介  Name: あんぜんぴん (AnnPin) Qiita: https://qiita.com/AnnPin GitHub: https://github.com/AnnPin Twitter: https://twitter.com/Xx_ann_pin_xX 読書メーター: https://bookmeter.com/users/886207 一言: へっぽこ学生です.  </description>
    </item>
    
    <item>
      <title>ブログを始めてみる (N 回目)</title>
      <link>https://annpin.github.io/posts/18/03/06/hello/</link>
      <pubDate>Tue, 06 Mar 2018 14:22:04 +0900</pubDate>
      
      <guid>https://annpin.github.io/posts/18/03/06/hello/</guid>
      <description>ブログを始めてみることにする&amp;hellip; と書くのは何度目だろうか&amp;hellip; ブログっていつも長続きしないで放置するんだよなぁ.
主に書きたくなるような記事はプログラミング技術に関することぐらいしかないから Qiita に上げるだけでいいかと思っていたのだが、 Qiita に上げるべきか悩むような記事をもっと気軽に書けるようにするには自分でブログを持ったほうが楽なのではと考え直した.
まぁ思い出した頃に覚書的にちょっと書く、みたいな使い方になるだろう.
今回は github.io だから、とりあえず git で push すれば即更新できるお手軽仕様. Vim キーバインドが無いエディタで何か書くことは苦痛でしかないので、こういう手軽な環境はとてもありがたい. それから Hugo という golang 製の静的サイトジェネレータがかなり良さそうなので試しに使ってみている. markdown 文書を書くだけで記事を投稿できるのだから快適.
恐らくは自分が勉強したことや調べたことの覚え書き的な記事が書かれることになるはず.
へっぽこですが、どうぞよろしく.</description>
    </item>
    
  </channel>
</rss>